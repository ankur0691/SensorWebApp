
import java.net.*;
import java.io.*;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONString;

/**
 * This class is the server side code which runs and serves the requests from the client
 * @author ankur
 */
public class TCPGunShotIncUsingTEAandPasswords {
    //Installer object that stores all the users information
    static Installer user = null;
    //Sensor object that stores all the sensors information
    static Sensor sensors = null;

    /**
     * Init() method that initializes our installers data 
     */
    public static void init() {
            //creating a sensor object to store all users 
            sensors = new Sensor();
            //creating a installer object to store all users data
            user = new Installer();
            //storing user,salt(generated by2 PasswordHash.java),hash(generated by PasswordHash.java),title of each user
            user.addElement("Moe","HLEO8IT1N55JZ1FRE4","vH2Qjf9cvmb5fzTw0PXKDdLL4n2LUus6Uiwmbd8xK2k=","Chief Sensor Installer");
            user.addElement("Larry","6N9MH3PW07V87SX9AJ","L94vhUam5X+CqwHLcntjnlygw8cVJQYOpsCGY9ZTpPc=","Associate Sensor Installer");
            user.addElement("Shemp","KAKXQT7AUG3L0BFAUH","L/5tsALPt/HY1pTs77YlxapTWtP56iOTfuAVztgDs10=","Associate Sensor Installer");
        }
        
    /**
     * Main method
     * @param args not required
     */
    public static void main (String args[]) {
		try{
                        // maintains the count of the visit
                        int count = 0;
			int serverPort = 7898; // the server port
			ServerSocket listenSocket = new ServerSocket(serverPort);
                        //initialize the installer details
                        init();
                        Scanner reader = new Scanner(System.in);
                        //read the user entered key to be used for encryption
                        System.out.println("Enter symmetric key as a 16-digit integer.");
                        String key = reader.nextLine();
                        TEA tea = new TEA(key.getBytes());
                        System.out.println("Waiting for installers to visit...");
			//keep listening for clients
                        while(true) {
				Socket clientSocket = listenSocket.accept();
                                //call connection class with the socket details,all installer data, tea encryption object, sensor object and incremented count 
				Connection c = new Connection(clientSocket,user,tea,sensors,++count);
			}
		} catch(IOException e) {System.out.println("Listen socket:"+e.getMessage());
                    }
        }
}

//this class deals 
class Connection extends Thread {
        //installer object that will be used to point to installer data
        Installer user = null;
        //sensor object that wll be used to store sensor information
        Sensor sensors = null;
        //stores encryption tea object(for server key)
        TEA tea = null;
        DataInputStream in;
	DataOutputStream out;
	Socket clientSocket;
        //used to copy the updated count
        int count = 0;
	
        //Constructor for Connection class that intializes all the objects and starts the thread
        public Connection (Socket aClientSocket, Installer user, TEA tea, Sensor sensors, int count) {
		try {
                        this.count = count;
                        this.user = user;
                        this.tea = tea;
                        this.sensors = sensors;
                        clientSocket = aClientSocket;
			in = new DataInputStream( clientSocket.getInputStream());
			out = new DataOutputStream( clientSocket.getOutputStream());
                        
			this.start();
		} catch(IOException e) {System.out.println("Connection:"+e.getMessage());}
	}
        
        @Override
	public void run(){
		try{
                        //length of the passed encrypted json string
                        int len = in.readInt();   
                        //read the json string from client
                        byte[] message = new byte[len];
                        in.read(message,0,len);
                        //decrypt the message
                        byte[] decryptedMessage = tea.decrypt(message);
                        String s = new String(decryptedMessage);
                        
                        String response;
                        
                        //check if the decrypted message is all ASCII value
                        if(!s.matches("\\p{ASCII}*")){
                            //cleint has used the wrong encryption key
                            //print the visit message on the server side
                            System.out.println("Got visit " + count + " illegal symmetric key used. This may be an attack.");
                            response = "Exception : Asymmetric key wrong!Closing connection...";
                        }else{
                            try{
                            //Client has entered the right key
                            //convert the decrypted string back to JSON object
                            JSONObject jsonObject = new JSONObject(s);
                            
                            String userId = jsonObject.getString("ID");
                            StringBuilder sbuff =  new StringBuilder();
                            
                            //print the visit message on the server side
                            if(this.user.getValue(userId)!=null)
                            System.out.print("Got visit " + count + " from " + userId + " , " + this.user.getValue(userId).get(2));
                            
                            //check if the  user credentials are correct
                            if(this.user.validate(userId,jsonObject.getString("passwd"))){
                                //It's a valid user
                                //check if the sensor already exists or a new sensor needs to be installed
                                if(!sensors.ifExist(jsonObject.getString("Sensor ID"))){
                                    //we are installing a new sensor
                                    System.out.println();
                                    //add the new sensor
                                    sensors.addElement(jsonObject.getString("Sensor ID"),jsonObject.getString("Longitude"), jsonObject.getString("Latitude"));
                                    response = "Thank you. The sensor’s location was securely transmitted to GunshotSensing Inc.";
                                    //create a kml file
                                    String kmlData = sensors.toKML();
                                    
                                }
                                else{
                                    //We are moving a sensor 
                                    //check if the client is a chief installer
                                    if(user.checkChief(userId)){
                                    //He is a chief installer so we will update the sensor details
                                    sensors.addElement(jsonObject.getString("Sensor ID"),jsonObject.getString("Longitude"), jsonObject.getString("Latitude"));
                                    System.out.println(", a sensor has been moved.");
                                    response = "Thank you. The sensor’s new location was securely transmitted to GunshotSensing Inc.";
                                    //create a kml file
                                    String kmlData = sensors.toKML();
                                    }
                                    // Client is not a chief installer and is not authorized to move the sensor
                                    else response = "Not authorized to change the sensor location";
                                }
                            }
                            //the user did not pass the authentication
                            else {
                                System.out.println("\n Illegal Password attempt. This maybe an attack.");
                                response = "Illegal ID or Password";
                            }
                            
                            //encrypt the response message obtained from one of the above scenarios and send it to client
                            byte encryptedResponse [] =  tea.encrypt(response.getBytes());
                            len = encryptedResponse.length;
                            out.writeInt(len);
                            out.write(encryptedResponse);
                            out.flush();
                            
                        }catch(IOException e) {
                    System.out.println("readline:"+e.getMessage());
                }           catch (NoSuchAlgorithmException ex) {
                                Logger.getLogger(Connection.class.getName()).log(Level.SEVERE, null, ex);
                            }
                }
                }catch(IOException e) {
                    System.out.println("readline:"+e.getMessage());
                }finally{ try {
                    clientSocket.close();
                }catch (IOException e){/*close failed*/}}

	}
        
}
